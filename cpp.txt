from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.graphics import Color, RoundedRectangle
from kivy.utils import get_color_from_hex
from kivy.graphics import Color, Rectangle, RoundedRectangle

# =============== Кастомная закруглённая кнопка ===============
class RoundedButton(Button):
    def __init__(self, bg_color=(0.4, 0.6, 1, 1), **kwargs):
        super().__init__(**kwargs)
        self.background_color = (0, 0, 0, 0)
        self.font_size = 24
        self.size_hint = (None, None)
        self.size = (200, 60)

        with self.canvas.before:
            Color(*bg_color)
            self.rect = RoundedRectangle(pos=self.pos, size=self.size, radius=[30])

        self.bind(pos=self.update_rect, size=self.update_rect)

    def update_rect(self, instance, value):
        self.rect.pos = instance.pos
        self.rect.size = instance.size


# =============== Экран: Главное меню ===============
class MainScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=40, spacing=20)
        layout.canvas.before.clear()
        with layout.canvas.before:
            Color(0.1, 0.1, 0.2, 1)  # тёмный фон
            self.rect = Rectangle(size=layout.size, pos=layout.pos)
        layout.bind(size=self.update_rect, pos=self.update_rect)

        # Заголовок
        layout.add_widget(Label(text="Главное меню", font_size=32, size_hint_y=None, height=50))

        # Кнопки
        btn_start = RoundedButton(text="Начать", bg_color=(0, 0.7, 0.9, 1))
        btn_settings = RoundedButton(text="Настройки", bg_color=(0.7, 0.5, 1, 1))
        btn_exit = RoundedButton(text="Выход", bg_color=(1, 0.3, 0.3, 1))

        btn_start.bind(on_press=self.go_to_game)
        btn_settings.bind(on_press=self.go_to_settings)
        btn_exit.bind(on_press=lambda x: App.get_running_app().stop())

        layout.add_widget(btn_start)
        layout.add_widget(btn_settings)
        layout.add_widget(btn_exit)

        self.add_widget(layout)

    def update_rect(self, instance, value):
        self.rect.pos = instance.pos
        self.rect.size = instance.size

    def go_to_settings(self, instance):
        self.manager.current = 'settings'  # Переключаемся на экран настроек

    def go_to_game(self, instance):
        self.manager.current = 'game'


# =============== Экран: Настройки ===============
class SettingsScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=40, spacing=20)
        layout.canvas.before.clear()
        with layout.canvas.before:
            Color(0.2, 0.1, 0.3, 1)
            self.rect = Rectangle(size=layout.size, pos=layout.pos)
        layout.bind(size=self.update_rect, pos=self.update_rect)

        layout.add_widget(Label(text="Экран настроек", font_size=32, height=50, size_hint_y=None))

        back_btn = RoundedButton(text="Назад", bg_color=(0.8, 0.4, 0.4, 1))
        back_btn.bind(on_press=self.go_back)
        layout.add_widget(back_btn)

        self.add_widget(layout)

    def update_rect(self, instance, value):
        self.rect.pos = instance.pos
        self.rect.size = instance.size

    def go_back(self, instance):
        self.manager.current = 'main'  # Возвращаемся в главное меню


# =============== Экран: Игра (пример) ===============
class GameScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=40, spacing=20)
        layout.add_widget(Label(text="Игровой экран!", font_size=32))
        back_btn = RoundedButton(text="Назад", bg_color=(0.8, 0.4, 0.4, 1))
        back_btn.bind(on_press=self.go_back)
        layout.add_widget(back_btn)
        self.add_widget(layout)

    def go_back(self, instance):
        self.manager.current = 'main'


# =============== Основное приложение ===============
class QuicklystApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(MainScreen(name='main'))
        sm.add_widget(SettingsScreen(name='settings'))
        sm.add_widget(GameScreen(name='game'))
        return sm


if __name__ == "__main__":
    QuicklystApp().run()